import React, { useState } from 'react';  
import Advance from "./Advance";
import './Interview.css';
import { jsPDF } from "jspdf";

function Interview() {  
    const [showTable, setShowTable] = useState(false);  


        const generatePDF = () => {
            setShowTable(true);
            const score = 34;
            const doc = new jsPDF();

            doc.setFontSize(18);
            doc.text("Test Score Report", 105, 20, { align: "center" });

            doc.setLineWidth(0.5);
            doc.rect(10, 25, 190, 250); // Box around the entire report

            doc.setFontSize(12);
            let yPos = 30;
            doc.text("Congratulations!! You have successfully completed your interview.", 20, yPos, { maxWidth: 170 });
            
            yPos += 10;
            doc.text(`Your Score: ${score} / 100`, 20, yPos);

            yPos += 10;
            doc.text("This is a test PDF generated after submitting the test.", 20, yPos, { maxWidth: 170 });

            // Adjusted to prevent overflow
            const longText = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).";
            
            yPos += 10;
            doc.text(longText, 20, yPos, { maxWidth: 170 });

            yPos += 60; // Adjust spacing after the long text
            doc.text("We appreciate your effort.", 20, yPos);

            yPos += 20;
            doc.setFontSize(14);
            doc.text("Skill Report", 20, yPos);

            yPos += 10;
            doc.setFontSize(12);
            doc.text("Skill", 30, yPos);
            doc.text("Score", 120, yPos);

            yPos += 5;
            const rowHeight = 10;
            const tableWidth = 160;

            // Define skill data
            const skills = [
                { name: "Skills", score: "8/10" },
                { name: "Performance", score: "9/10" },
                { name: "Experience", score: "7/10" },
                { name: "Projects", score: "9/10" }
            ];

            // Draw table borders dynamically and fill in skill data
            skills.forEach((skill, index) => {
                const currentY = yPos + (index + 1) * rowHeight;
                doc.rect(30, currentY, tableWidth, rowHeight); // Row border
                doc.text(skill.name, 32, currentY + 7);
                doc.text(skill.score, 122, currentY + 7);
            });

            // Final section for long text after table
            const finalTextStartY = yPos + (skills.length + 1) * rowHeight + 10;
            doc.text(longText, 20, finalTextStartY, { maxWidth: 170 });

            const appreciationTextY = finalTextStartY + 50;
            doc.text("We appreciate your effort.", 20, appreciationTextY);

            // Footer text
            doc.setFontSize(10);
            doc.setTextColor(100);
            doc.text("Generated by Listening Shine Logistics", 105, 285, { align: "center" });

            // Save PDF
            doc.save("test_score_3.pdf");
        };

    return (  
        <div className="interview-container d-flex justify-content-between align-items-start">  
            {/* Column 1: Advance Component */}  
            <div className="column">  
                <div className="advance-box" style={{marginRight:"200px"}}>  
                    <Advance />  
                </div>  
            </div>  

            {/* Column 2: Header, Table, and Button */}  
            <div className="row h1-container text-center">  
                <h1 className="mb-4 animated-title">AI VIRTUAL INTERVIEW</h1>  
                
                {/* Conditionally render the table based on state */}  
                {showTable && (  
                    <div className="table-container" style={{marginRight:"120px",color:"black",width:"800px"}}>  
                        <table className="animated-table">  
                            <thead>  
                                <tr>  
                                    <th>Skill</th>  
                                    <th>Score</th>  
                                </tr>  
                            </thead>  
                            <tbody>  
                                <tr>  
                                    <td>Skills</td>  
                                    <td>8/10</td>  
                                </tr>  
                                <tr>  
                                    <td>Performance</td>  
                                    <td>9/10</td>  
                                </tr>  
                                <tr>  
                                    <td>Experience</td>  
                                    <td>7/10</td>  
                                </tr>  
                                <tr>  
                                    <td>Projects</td>  
                                    <td>9/10</td>  
                                </tr>  
                            </tbody>  
                        </table>  
                    </div>  
                )}  

                <button className="btn colorful-button" onClick={generatePDF}>Finish</button>  
            </div>  
        </div>  
    );  
}

export default Interview;